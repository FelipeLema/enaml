import math
import random
import datetime
from enaml.enums import Orientation, Direction
from enaml.converters import SliderLogConverter, IntConverter
            

defn ErrorField:
    Field:
        error_color = '#F9A7A7'
        bgcolor << error_color if error else 'none'


defn IntField:
    ErrorField:
        converter = IntConverter()
        placeholder_text = 'Integers Only!'


defn IntFieldsPlusOne(other_elem):
    IntField:
        pass
    IntField:
        pass
    IntField:
        pass
    other_elem:
        pass

defn LogSlider(default):
    # A log slider 1-10
    Slider:
        maximum = 1000
        log_value << 10 ** (value/1000.0)
        value = math.log10(default)

defn TestSplit:
    Window:
        Splitter:
            Container:
                Container:
                    layout = Form()
                    RadioButton:
                        pass
                    RadioButton:
                        pass
                    RadioButton:
                        pass
                Container:
                    layout = Form()
                    PushButton:
                        pass
                    PushButton:
                        pass
                    PushButton:
                        pass
            Container:
                pass
           
            

defn ButtonList:
    PushButton -> keybutton:
        text = 'foo'
        constraints = [
            left == parent.left,
            top == parent.top,
            width == 100,
            height == 30,
        ]
        clicked >> print('clicked')
    PushButton:
        text = 'foo'
        constraints = [
            left == parent.left,
            v_center == parent.v_center,
            width == 100,
            height == 30,
            top >= keybutton.bottom,
        ]
    PushButton:
        text = 'foo'
        constraints = [
            left == parent.left,
            bottom == parent.bottom,
            width == 100,
            height == 30,
        ]
    PushButton:
        text = 'foo'
        constraints = [
            h_center == parent.h_center,
            top == parent.top,
            width == 100,
            height == 30,
            left >= keybutton.right
        ]
    PushButton:
        text = 'foo'
        constraints = [
            h_center == parent.h_center,
            v_center == parent.v_center,
            width == 100,
            height == 30,
        ]
    Field -> text_field:
        value = 'foo'
        constraints = [
            h_center == parent.h_center,
            bottom == parent.bottom,
            width == 100,
            height == 30,
        ]
    PushButton:
        text = 'foo'
        constraints = [
            right == parent.right,
            top == parent.top,
            width == 100,
            height == 30,
        ]
    PushButton:
        text = 'foo'
        constraints = [
            right == parent.right,
            v_center == parent.v_center,
            width == 100,
            height == 30,
        ]
        clicked >> print(toolkit)
    Component:
        PushButton -> nested_pb:
            text = 'bar'


defn TestView:
    Window:
        Component:
            ButtonList -> buttonlist, nested_pb as nested:
                # notice here we are reaching into the namespace 
                # of the defn we just called, and changing the value
                # of the text on the nested push button.
                nested.text = 'foo bar'


defn MainWindow(model, table_model):
    Window:
        title << model.window_title
        Panel:
            HGroup:
                VGroup:
                    Panel:
                        HGroup:
                            direction = Direction.RIGHT_TO_LEFT
                            RadioButton -> rb1:
                                text = 'rb1'
                                toggled >> print('rb1:', checked)
                            RadioButton:
                                text = 'rb2'
                                toggled >> print('rb2:', checked)
                            RadioButton:
                                text = 'rb3'
                                toggled >> print('rb3:', checked)
                            RadioButton:
                                text = 'rb4'
                                toggled >> print('rb4:', checked)
                    Panel:
                        HGroup:
                            RadioButton:
                                text = 'rb1'
                            RadioButton:
                                text = 'rb2'
                            RadioButton:
                                text = 'rb3'
                            RadioButton:
                                text = 'rb4'
                    DateEdit:
                        date = cldr.date
                    Calendar -> cldr:
                        minimum_date = datetime.date(1970, 1, 1)
                        activated >> print('activated', args.new)
                        selected >> print('selected', args.new)
                        date >> print('new date', args.new)
                    ComboBox -> cmbx:
                        items = range(100)
                        value = 1
                        selected >> print('selected', args.new)
                    PushButton:
                        text = 'Randomize Error Colors'
                        clicked >> model.randomize_error_colors()
                        bgcolor << color_field.value
                    HGroup:
                        Label:
                            text = 'min:'
                        Label:
                            text = str(sb.low)
                        Label:
                            text = 'max:'
                        Label:
                            text = str(sb.high)
                        Label:
                            text = 'val:'
                        Label:
                            text << str(sb.value)
                    HGroup:
                        CheckBox -> wrap_box:
                            text = 'Allow wrap:'
                            toggled >> setattr(cmbx, 'value', 42)
                        SpinBox -> sb:
                            prefix = 'Foo ' if wrap_box.checked else 'Bar '
                            suffix = ' lb' if wrap_box.checked else ' kg'
                            wrap << wrap_box.checked
                            special_value_text = "Auto"
                            step = 2
                            low << -20 if not wrap else 0
                            high = 20
                    Field -> line_edit:
                        value := model.window_title
                    # The wx layout behaves really really badly if the
                    # slider orientation is vertical in a vgroup layout
                    HGroup:
                        Label:
                            text << "A Slider!" if sldr.log_value <= 2.0 else '%.2f    ' % sldr.log_value
                            bgcolor << color_field.value
                            fgcolor << 'black' if not bgcolor else 'green'
                        LogSlider(5.0) -> sldr:
                            tracking := tracking_box.checked
                            log_value >> setattr(self, 'foo', str(log_value))
                            tick_interval = 50
                            orientation = Orientation.VERTICAL if wrap_box.checked else Orientation.HORIZONTAL

                            # Here, we define our own `foo` attribute which
                            # can be used like any other predefined attribute.
                            # Here, we delegate to the window title, and set
                            # the value of foo from the `value` notifier above.
                            # This `foo` could have been defined before the
                            # the `value` handler, and things would still
                            # work properly.
                            foo := model.window_title
                            foo >> print('foo changed', foo)
                        CheckBox -> tracking_box:
                            checked = True
                            text = 'Tracking'
                    IntFieldsPlusOne(Slider) -> custom_fields:
                        pass
                    Form:
                        Field -> color_field:
                            name = "foo"
                            placeholder_text = "color name or #rrggbb(aa)"
                        Field -> ofld:
                            name = "bar"
                            placeholder_text = name + ' field'

                    # XXX this really shouldn't be necessary, but it is at the
                    # moment because of differences in wx and qt layout behavior
                    Panel:
                        pass
                VGroup:
                    TableView:
                        item_model = table_model
                    Html:
                        source = model.html_source

