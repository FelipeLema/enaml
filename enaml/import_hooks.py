#------------------------------------------------------------------------------
#  Copyright (c) 2011, Enthought, Inc.
#  All rights reserved.
#------------------------------------------------------------------------------
import os
import sys
import types


class EnamlImporter(object):
    """ A sys.meta_path finder object for enaml modules.

    An instance of this class can be added to sys.meta_path to enable
    the import of enaml files using the normal Python import machinery.

    """
    @classmethod
    def install(cls):
        """ Appends this importer into sys.meta_path.

        """
        if cls not in sys.meta_path:
            sys.meta_path.append(cls)
    
    @classmethod
    def uninstall(cls):
        """ Removes this importer from sys.meta_path.

        """
        if cls in sys.meta_path:
            sys.meta_path.remove(cls)

    @classmethod
    def parse_enaml(cls, enaml_path):
        """ Returns the ast generated by the enaml parser.

        Arguments
        ---------
        enaml_path : string
            The full path to the .enaml file.

        """
        from .parsing import parser
        with open(enaml_path) as f:
            enaml_source = f.read()
        return parser.parse(enaml_source)

    @classmethod
    def find_module(cls, fullname, path=None):
        """ Searches the package path or sys.path for a .enaml module
        with the given full name. If found, returns a loader object.

        """
        # We're looking inside a package and 'path' the package path
        if path is not None:
            stem = fullname.rsplit('.', 1)[-1] + os.path.extsep + 'enaml'
            for root in path:
                enaml_path = os.path.join(root, stem)
                if os.path.exists(enaml_path):
                    return cls(enaml_path)
        
        # We're trying a load a package
        elif '.' in fullname:
            return
        
        # We're doing a direct import
        else:
            stem = fullname + os.path.extsep + 'enaml'
            for root in sys.path:
                enaml_path = os.path.join(root, stem)
                if os.path.exists(enaml_path):
                    return cls(enaml_path)

    def __init__(self, enaml_module_path):
        """ Initialize an importer object.

        Parameters
        ----------
        enaml_module_path : string
            The path to the .enaml file.

        """
        self.enaml_module_path = enaml_module_path

    def load_module(self, fullname):
        """ Loads and returns the Python module for the given enaml path.
        The created module is added to sys.modules.

        """
        mod = sys.modules.setdefault(fullname, types.ModuleType(fullname))
        path = self.enaml_module_path
        mod.__path__ = path
        mod.__loader__ = self
        
        from .parsing.enaml_compiler import EnamlCompiler
        EnamlCompiler.compile(self.parse_enaml(path), mod.__dict__)
        
        return mod

